version: '3.8'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-dagster}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 8s
      retries: 5
    networks:
      - dagma

  user_code:
    build:
      context: .
      dockerfile: ./docker/Dockerfile_user_code
      args:
        HTTP_PROXY: ${HTTP_PROXY}
        HTTPS_PROXY: ${HTTPS_PROXY}
        NO_PROXY: ${NO_PROXY}
    image: ${USER_CODE_IMAGE:-dagma/user-code:dev}
    environment:
      DAGSTER_HOME: /opt/dagster/dagster_home
      DAGSTER_CURRENT_IMAGE: ${USER_CODE_IMAGE:-dagma/user-code:dev}
      DAGSTER_PG_URL: postgresql+psycopg2://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-dagster}
      MLFLOW_USE_TRACKING: "1"
      # 明确指向 mlflow 服务，避免走宿主代理
      MLFLOW_TRACKING_URI: http://mlflow:5000
      LANGFLOW_BASE_URL: http://langflow:7860
      # 显式指向 qdrant 服务，避免默认 localhost 导致连接失败
      QDRANT_HOST: qdrant
      HTTP_PROXY: ""
      http_proxy: ""
      HTTPS_PROXY: ""
      https_proxy: ""
      NO_PROXY: user_code,postgres,mlflow,qdrant,langflow,localhost,127.0.0.1,::1
      no_proxy: user_code,postgres,mlflow,qdrant,langflow,localhost,127.0.0.1,::1
    depends_on:
      postgres:
        condition: service_healthy
      mlflow:
        condition: service_started
    volumes:
      - dagster_home:/opt/dagster/dagster_home
      - ./docker/config/dagster.yaml:/opt/dagster/dagster_home/dagster.yaml:ro
      - mlruns:/mlruns
    networks:
      - dagma

  webserver:
    build:
      context: .
      dockerfile: ./docker/Dockerfile_dagster
      args:
        HTTP_PROXY: ${HTTP_PROXY}
        HTTPS_PROXY: ${HTTPS_PROXY}
        NO_PROXY: ${NO_PROXY}
    image: ${DAGSTER_IMAGE:-dagma/dagster:dev}
    command: ["dagster-webserver", "-h", "0.0.0.0", "-p", "3000", "-w", "/opt/dagster/workspace.yaml"]
    ports:
      - "${DAGSTER_WEBSERVER_PORT:-3000}:3000"
    environment:
      DAGSTER_HOME: /opt/dagster/dagster_home
      DAGSTER_PG_URL: postgresql+psycopg2://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-dagster}
      # 避免 gRPC 走宿主机代理，导致连接 user_code 失败
      HTTP_PROXY: ""
      http_proxy: ""
      HTTPS_PROXY: ""
      https_proxy: ""
      NO_PROXY: user_code,postgres,mlflow,qdrant,langflow,localhost,127.0.0.1,::1
      no_proxy: user_code,postgres,mlflow,qdrant,langflow,localhost,127.0.0.1,::1
    volumes:
      - dagster_home:/opt/dagster/dagster_home
      - ./docker/config/dagster.yaml:/opt/dagster/dagster_home/dagster.yaml:ro
      - ./docker/config/workspace.yaml:/opt/dagster/workspace.yaml:ro
    depends_on:
      postgres:
        condition: service_healthy
      user_code:
        condition: service_started
    networks:
      - dagma

  daemon:
    build:
      context: .
      dockerfile: ./docker/Dockerfile_dagster
      args:
        HTTP_PROXY: ${HTTP_PROXY}
        HTTPS_PROXY: ${HTTPS_PROXY}
        NO_PROXY: ${NO_PROXY}
    image: ${DAGSTER_IMAGE:-dagma/dagster:dev}
    command: ["dagster-daemon", "run"]
    restart: on-failure
    environment:
      DAGSTER_HOME: /opt/dagster/dagster_home
      DAGSTER_PG_URL: postgresql+psycopg2://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-dagster}
      HTTP_PROXY: ""
      http_proxy: ""
      HTTPS_PROXY: ""
      https_proxy: ""
      NO_PROXY: user_code,postgres,mlflow,qdrant,langflow,localhost,127.0.0.1,::1
      no_proxy: user_code,postgres,mlflow,qdrant,langflow,localhost,127.0.0.1,::1
    volumes:
      - dagster_home:/opt/dagster/dagster_home
      - ./docker/config/dagster.yaml:/opt/dagster/dagster_home/dagster.yaml:ro
    depends_on:
      postgres:
        condition: service_healthy
      user_code:
        condition: service_started
    networks:
      - dagma

  mlflow:
    build:
      context: .
      dockerfile: ./docker/Dockerfile_mlflow
      args:
        HTTP_PROXY: ${HTTP_PROXY}
        HTTPS_PROXY: ${HTTPS_PROXY}
        NO_PROXY: ${NO_PROXY}
    image: ${MLFLOW_IMAGE:-dagma/mlflow:dev}
    command: ["mlflow", "server", "--host", "0.0.0.0", "--port", "5000", "--serve-artifacts", "--backend-store-uri", "postgresql+psycopg2://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${MLFLOW_DB:-mlflow}", "--artifacts-destination", "/mlruns"]
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:5000
      MLFLOW_DB: ${POSTGRES_DB:-dagster}
    ports:
      - "${MLFLOW_PORT:-5000}:5000"
    volumes:
      - mlruns:/mlruns
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dagma

  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "${QDRANT_PORT:-6333}:6333"
    volumes:
      - qdrant_storage:/qdrant/storage
    networks:
      - dagma

  langflow:
    image: ${LANGFLOW_IMAGE:-langflowai/langflow:latest}
    ports:
      - "${LANGFLOW_PORT:-7860}:7860"
    environment:
      # 可选：如果启用了鉴权，请在 .env 或 CI 中提供 API Key
      LANGFLOW_API_KEY: ${LANGFLOW_API_KEY}
    networks:
      - dagma

networks:
  dagma:
    driver: bridge

volumes:
  pgdata:
  mlruns:
  qdrant_storage:
  dagster_home:
